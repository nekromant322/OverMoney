environment: ${ENVIRONMENT:dev}

server:
  port: 8080

service:
  transaction:
    processing: kafka

spring:
  application:
    name: payment-service

  datasource:
    url: jdbc:postgresql://${PAYMENT_DB_HOST:localhost}:${PAYMENT_DB_PORT:5436}/payments-db
    username: ${PAYMENT_DB_USER:postgres}
    password: ${PAYMENT_DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver

  jpa:
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    generate-ddl: false
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext

  liquibase:
    enabled: false
    change-log: /db/changelog/db.changelog-master.xml

  profiles:
    active: ${SPRING_APPLICATION_PROFILE:dev}

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka-service:9092}
    topics:
      payment-request: payment-requests
      payment-response: payment-responses
      subscription-request: subscription-requests
      subscription-response: subscription-responses
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.trusted.packages: com.override.dto
    consumer:
      auto-offset-reset: earliest
      properties:
        spring.json.trusted.packages: com.override.dto
      # Конфигурация для payment-service-group
      payment-service:
        group-id: payment-service-group
        key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
        value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
        properties:
          spring:
            deserializer:
              key:
                delegate:
                  class: org.apache.kafka.common.serialization.StringDeserializer
              value:
                delegate:
                  class: org.springframework.kafka.support.serializer.JsonDeserializer
      # Конфигурация для subscription-consumer
      subscription-service:
        group-id: subscription-consumer
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

logging:
  level:
    org.zalando.logbook: TRACE
    org.springframework.kafka: INFO

management:
  endpoints:
    web:
      exposure:
        include: health,prometheus,gitInfo
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true

authorization-header:
  header-value: ${INTERNAL_KEY_HEADER:X-INTERNAL-KEY}

mask-log spring-boot-starter:
  maskedFields:
    - x-internal-key

yookassa:
  shop-id: ${YOOKASSA_SHOP_ID}
  secret-key: ${YOOKASSA_SECRET_KEY}