servicePort: 3000
serviceTargetPort: 3000

deployment:
  containers:
    image: grafana/grafana
    imageTag: latest
    containerPort: 3000
    env:
      - name: GF_SECURITY_ADMIN_USER
        value: "grafana"
      - name: GF_SERVER_ROOT_URL
        value: "%(protocol)s://%(domain)s:%(http_port)s/grafana/"
      - name: GF_SERVER_SERVE_FROM_SUB_PATH
        value: "true"
    envFrom:
      - name: GF_SECURITY_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            name: default
            key: default-grafana-password
    volumes:
      - name: secrets-store-inline
        volumeMountPath: "/mnt/secrets-store"
        readOnly: true
      - name: grafana-datasources
        mountPath: "/etc/grafana/provisioning/datasources/datasources.yaml"
        subPath: datasources.yaml
      - name: grafana-alerting
        mountPath: "/etc/grafana/provisioning/alerting/default-alert-rules.yaml"
        subPath: default-alert-rules.yaml
      - name: grafana-notifiers
        mountPath: "/etc/grafana/provisioning/notifiers/default-contact-points.yaml"
        subPath: default-contact-points.yaml
      - name: grafana-notification-templates
        mountPath: "/etc/grafana/notification-templates/telegram-template.tmpl"
        subPath: telegram-template.tmpl
  priorityClassName: prod-priority-class

grafana-datasources:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus-service:9090
        access: proxy
        isDefault: true
        jsonData:
          timeInterval: "5s"
          httpMethod: "POST"

grafana-alerting:
  default-alert-rules.yaml: |
    apiVersion: 1
    groups:
      - name: Critical Alerts
        folder: Alerts
        interval: 10s
        rules:
          - title: System CPU Usage > 80
            condition: B
            data:
              - refId: A
                relativeTimeRange:
                  from: 600
                  to: 0
                datasourceUid: fejkzilfrpy4gf
                model:
                  expr: system_cpu_usage * 100
                  instant: true
                  refId: A
              - refId: B
                datasourceUid: __expr__
                model:
                  conditions:
                    - evaluator:
                        params: [80]
                        type: gt
                      operator: { type: and }
                      type: query
                  expression: A
                  refId: B
                  type: threshold
            noDataState: Alerting
            execErrState: Alerting
            for: 1m
            annotations:
              description: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU > 80%"
              summary: "–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU"
            notification_settings:
              receiver: "Telegram"

grafana-notifiers:
  default-contact-points.yaml: |
    apiVersion: 1
    contactPoints:
      - name: Telegram
        receivers:
          - type: telegram
            settings:
              bottoken: "$__env{telegram-bot-token-grafana}"
              chatid: "$__env{telegram-chat-id-grafana}"
              message: '{{ template "telegram.message" . }}'

grafana-notification-templates:
  telegram-template.tmpl: |
    {{ define "alert_list" }}
    {{ range . }}
    {{ if eq .Status "firing" }}üî¥{{ else }}üü¢{{ end }} <b>{{ .Labels.alertname }}</b>
    {{ if .Labels.instance }}‚Ä¢ <b>–ò–Ω—Å—Ç–∞–Ω—Å:</b> {{ .Labels.instance }}{{ end }}
    {{ if .Labels.job }}‚Ä¢ <b>–°–µ—Ä–≤–∏—Å:</b> {{ .Labels.job }}{{ end }}
    {{ range .Annotations.SortedPairs }}‚Ä¢ <b>{{ .Name }}:</b> {{ .Value }}
    {{ end }}{{ end }}{{ end }}

    {{ define "telegram.message" }}
    {{ if gt (len .Alerts.Firing) 0 }}<b>üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ê–õ–ï–†–¢–´</b>
    {{ template "alert_list" .Alerts.Firing }}{{ end }}
    {{ if gt (len .Alerts.Resolved) 0 }}<b>‚úÖ –†–ï–®–ï–ù–ù–´–ï –ê–õ–ï–†–¢–´</b>
    {{ template "alert_list" .Alerts.Resolved }}{{ end }}
    {{ end }}

secretProviderClass:
  name: vault-default