apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Chart.Name }}-sa
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Chart.Name }}-cluster-role
rules:
  - apiGroups: [""]
    resources: ["pods", "pods/log", "services"]
    verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Chart.Name }}-cluster-role-binding
subjects:
  - kind: ServiceAccount
    name: {{ .Chart.Name }}-sa
    namespace: default
roleRef:
  kind: ClusterRole
  name: {{ .Chart.Name }}-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sa-{{ .Chart.Name }}
  labels:
    app: sa-{{ .Chart.Name }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
      app: sa-{{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: sa-{{ .Chart.Name }}
    spec:
      serviceAccountName: {{ .Chart.Name }}-sa
      containers:
        - name: sa-{{ .Chart.Name }}
          image: {{ .Values.deployment.containers.image }}:{{ .Values.deployment.containers.imageTag }}
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.retention.time=14d"
          ports:
            - containerPort: {{ .Values.deployment.containers.containerPort }}
          volumeMounts:
            - name: {{ .Chart.Name }}-config-volume
              mountPath: /etc/prometheus
      volumes:
        - name: {{ .Chart.Name }}-config-volume
          configMap:
            name: {{ .Chart.Name }}-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-config
  labels:
    app: {{ .Chart.Name }}
data: |
  global:
    scrape_interval: 15s
  scrape_configs:
    - job_name: 'prometheus'
      static_configs:
        - targets: ['localhost:9090']

    - job_name: 'recognizer_overmoney_monitoring'
      scrape_interval: 5s
      metrics_path: '/actuator/prometheus'
      kubernetes_sd_configs:
        - role: pod
      relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_app]
          action: keep
          regex: sa-recognizer
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: instance
          replacement: $1
          regex: (.+)

    - job_name: 'orchestrator_overmoney_monitoring'
      scrape_interval: 5s
      metrics_path: '/actuator/prometheus'
      kubernetes_sd_configs:
        - role: pod
      relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_app]
          action: keep
          regex: sa-orchestrator
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: instance
          replacement: $1
          regex: (.+)

    - job_name: 'telegram_bot_overmoney_monitoring'
      scrape_interval: 5s
      metrics_path: '/actuator/prometheus'
      kubernetes_sd_configs:
        - role: pod
      relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_app]
          action: keep
          regex: sa-telegram-bot
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: instance
          replacement: $1
          regex: (.+)

    - job_name: 'orchestrator_db_monitoring'
      scrape_interval: 15s
      static_configs:
        - targets: ['postgres-exporter-orchestrator-svc.monitoring:9187']
          labels:
            group: 'orchestrator-db'

    - job_name: 'telegram_db_monitoring'
      scrape_interval: 15s
      static_configs:
        - targets: ['postgres-exporter-telegram-svc.monitoring:9187']
          labels:
            group: 'telegram-bot-db'
---
apiVersion: v1
kind: Service
metadata:
  name: sa-{{ .Chart.Name }}-svc
spec:
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.targetPort }}
      protocol: TCP
  selector:
    app: sa-{{ .Chart.Name }}