name: Build & Push & Deploy to k8s cluster

on:
  push:
    branches:
      - master

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      recognizer: ${{ steps.filter.outputs.recognizer }}
      orchestrator: ${{ steps.filter.outputs.orchestrator }}
      telegram-bot: ${{ steps.filter.outputs.telegram-bot }}
      prod-priority-class-chart: ${{ steps.filter.outputs.prod-priority-class-chart }}
      qa-priority-class-chart: ${{ steps.filter.outputs.qa-priority-class-chart }}
      recognizer-chart: ${{ steps.filter.outputs.recognizer-chart }}
      ingress-chart: ${{ steps.filter.outputs.ingress-chart }}
      zookeeper-chart: ${{ steps.filter.outputs.zookeeper-chart }}
      kafka-chart: ${{ steps.filter.outputs.kafka-chart }}
      orchestrator-chart: ${{ steps.filter.outputs.orchestrator-chart }}
      telegram-bot-chart: ${{ steps.filter.outputs.telegram-bot-chart }}
      postgres-exporter-orchestrator-chart: ${{ steps.filter.outputs.postgres-exporter-orchestrator-chart }}
      postgres-exporter-telegram-chart: ${{ steps.filter.outputs.postgres-exporter-telegram-chart }}
      kafka-ui-chart: ${{ steps.filter.outputs.kafka-ui-chart }}
      grafana-chart: ${{ steps.filter.outputs.grafana-chart }}
      admin-user-chart: ${{ steps.filter.outputs.admin-user-chart }}
      prometheus-chart: ${{ steps.filter.outputs.prometheus-chart }}
#      invest: ${{ steps.filter.outputs.invest }}
#      invest-chart: ${{ steps.filter.outputs.invest-chart }}
#      wit-ai-go-proxy: ${{ steps.filter.outputs.wit-ai-go-proxy }}
#      wit-ai-go-proxy-chart: ${{ steps.filter.outputs.wit-ai-go-proxy-chart }}
#      frontend: ${{ steps.filter.outputs.frontend }}
#      frontend-chart: ${{ steps.filter.outputs.frontend-chart }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            recognizer: ['recognizer_service/**']
            orchestrator: ['orchestrator_service/**']
            telegram-bot: ['telegram_bot_service/**']
            prod-priority-class-chart: ['charts/prod-priority-class/templates/**', '/charts/prod-priority-class/chart.yaml', '/charts/prod-priority-class/values.yaml']
            qa-priority-class-chart: ['charts/qa-priority-class/templates/**', '/charts/qa-priority-class/chart.yaml', '/charts/qa-priority-class/values.yaml']
            recognizer-chart: ['charts/recognizer/templates/**', '/charts/recognizer/chart.yaml', '/charts/recognizer/values.yaml']
            ingress-chart: ['charts/ingress/templates/**', '/charts/ingress/chart.yaml', '/charts/ingress/values.yaml']
            zookeeper-chart: ['charts/zookeeper/templates/**', '/charts/zookeeper/chart.yaml', '/charts/zookeeper/values.yaml']
            kafka-chart: ['charts/kafka/templates/**', '/charts/kafka/chart.yaml', '/charts/kafka/values.yaml']
            orchestrator-chart: ['charts/orchestrator/templates/**', '/charts/orchestrator/chart.yaml', '/charts/orchestrator/values.yaml']
            telegram-bot-chart: ['charts/telegram-bot/templates/**', '/charts/telegram-bot/chart.yaml', '/charts/telegram-bot/values.yaml']
            postgres-exporter-orchestrator-chart: ['charts/postgres-exporter-orchestrator/templates/**', '/charts/postgres-exporter-orchestrator/chart.yaml', '/charts/postgres-exporter-orchestrator/values.yaml']
            postgres-exporter-telegram-chart: ['charts/postgres-exporter-telegram/templates/**', '/charts/postgres-exporter-telegram/chart.yaml', '/charts/postgres-exporter-telegram/values.yaml']
            kafka-ui-chart: ['charts/kafka-ui/templates/**', '/charts/kafka-ui/chart.yaml', '/charts/kafka-ui/values.yaml']
            grafana-chart: ['charts/grafana/templates/**', '/charts/grafana/chart.yaml', '/charts/grafana/values.yaml']
            admin-user-chart: ['charts/admin-user/templates/**', '/charts/admin-user/chart.yaml', '/charts/admin-user/values.yaml']
            prometheus-chart: ['charts/prometheus/templates/**', '/charts/prometheus/chart.yaml', '/charts/prometheus/values.yaml']
#            invest: ['invest_service/**']
#            invest-chart: ['charts/invest/templates/**', '/charts/invest/chart.yaml', '/charts/invest/values.yaml']
#            wit-ai-go-proxy: ['wit_ai_go_proxy/**']
#            wit-ai-go-proxy-chart: ['charts/wit-ai-go-proxy/templates/**', '/charts/wit-ai-go-proxy/chart.yaml', '/charts/wit-ai-go-proxy/values.yaml']
#            frontend: ['frontend/**']
#            frontend-chart: ['charts/frontend/templates/**', '/charts/frontend/chart.yaml', '/charts/frontend/values.yaml']

  build-and-push-images:
    name: Build & Push images to DockerHub
    runs-on: ubuntu-latest
    needs: [detect-changes]
    steps:
      - uses: actions/checkout@v4
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: v0.7.0

      - name: Recognizer Build and Push to Dockerhub
        if: ${{ needs.detect-changes.outputs.recognizer == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /recognizer_service/Dockerfile
          push: true
          tags: nekromant322/overmoney-recognizer

      - name: Orchestrator Build and Push to Dockerhub
        if: ${{ needs.detect-changes.outputs.orchestrator == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /orchestrator_service/Dockerfile
          push: true
          tags: nekromant322/overmoney-orchestrator

      - name: Telegram Bot Build and Push to Dockerhub
        if: ${{ needs.detect-changes.outputs.telegram-bot == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /telegram_bot_service/Dockerfile
          push: true
          tags: nekromant322/overmoney-telegram-bot

#      - name: Invest Build and Push to Dockerhub
#        if: ${{ needs.detect-changes.outputs.invest == 'true' }}
#        uses: docker/build-push-action@v2
#        with:
#          file: /invest_service/Dockerfile
#          push: true
#          tags: nekromant322/overmoney-invest

#      - name: Wit ai go proxy Build and Push to Dockerhub
#        if: ${{ needs.detect-changes.outputs.wit-ai-go-proxy == 'true' }}
#        uses: docker/build-push-action@v2
#        with:
#          file: /wit_ai_go_proxy/Dockerfile
#          push: true
#          tags: nekromant322/overmoney-wit-ai-go-proxy

#      - name: Frontend Build and Push to Dockerhub
#        if: ${{ needs.detect-changes.outputs.frontend == 'true' }}
#        uses: docker/build-push-action@v2
#        with:
#          file: /frontend/Dockerfile
#          push: true
#          tags: nekromant322/overmoney-frontend

  deploy-to-k8s:
    name: Deploy to Kubernetes Cluster
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push-images]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Inject secrets in resource manifests
        uses: none0nfg/yaml-secrets-injector@v0.0.1
        with:
          inject_files: |-
            charts/recognizer/values.yaml
            charts/ingress/values.yaml
            charts/zookeeper/values.yaml
            charts/kafka/values.yaml
            charts/postgres-exporter-orchestrator/values.yaml
            charts/orchestrator/values.yaml
            charts/postgres-exporter-telegram/values.yaml
            charts/telegram-bot/values.yaml
            charts/kafka-ui/values.yaml
            charts/grafana/values.yaml
            charts/admin-user/values.yaml
            charts/prometheus/values.yaml
#            charts/invest/values.yaml
#            charts/wit-ai-go-proxy/values.yaml
#            charts/frontend/values.yaml
          secrets: ${{ toJSON(secrets) }}

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBER_STATIC_CONFIG }}" | base64 --decode > $HOME/.kube/config
          kubectl config use-context default

      - name: Test Kubernetes Connection
        run: kubectl cluster-info

      - name: Helm Deploy Prod Priority Class
        if: ${{ needs.detect-changes.outputs.prod-priority-class-chart == 'true' }}
        run: helm upgrade --install --atomic -f ./charts/prod-priority-class/values.yaml prod-priority-class ./charts/prod-priority-class

      - name: Helm Deploy QA Priority Class
        if: ${{ needs.detect-changes.outputs.qa-priority-class-chart == 'true' }}
        run: helm upgrade --install --atomic -f ./charts/qa-priority-class/values.yaml qa-priority-class ./charts/qa-priority-class

      - name: Helm Deploy Recognizer Service
        if: ${{ needs.detect-changes.outputs.recognizer-chart == 'true' }}
        run: helm upgrade --install --atomic -n default -f ./charts/recognizer/values.yaml recognizer ./charts/recognizer

      - name: Helm Deploy Ingress
        if: ${{ needs.detect-changes.outputs.ingress-chart == 'true' }}
        run: helm upgrade --install --atomic -n default -f ./charts/ingress/values.yaml ingress-qa ./charts/ingress

      - name: Helm Deploy Zookeeper
        if: ${{ needs.detect-changes.outputs.zookeeper-chart == 'true' }}
        run: helm upgrade --install --atomic -n default -f ./charts/zookeeper/values.yaml zookeeper ./charts/zookeeper

      - name: Helm Deploy Kafka
        if: ${{ needs.detect-changes.outputs.kafka-chart == 'true' }}
        run: helm upgrade --install --atomic -n default -f ./charts/kafka/values.yaml kafka ./charts/kafka

      - name: Helm Deploy Postgres Exporter Orchestrator
        if: ${{ needs.detect-changes.outputs.postgres-exporter-orchestrator-chart == 'true' }}
        run: helm upgrade --install --atomic -n default -f ./charts/postgres-exporter-orchestrator/values.yaml postgres-exporter-orchestrator ./charts/postgres-exporter-orchestrator

      - name: Helm Deploy Orchestrator Service
        if: ${{ needs.detect-changes.outputs.orchestrator-chart == 'true' }}
        run: helm upgrade --install --atomic -n default -f ./charts/orchestrator/values.yaml orchestrator ./charts/orchestrator

      - name: Helm Deploy Postgres Exporter Telegram
        if: ${{ needs.detect-changes.outputs.postgres-exporter-telegram-chart == 'true' }}
        run: helm upgrade --install --atomic -n default -f ./charts/postgres-exporter-telegram/values.yaml postgres-exporter-telegram ./charts/postgres-exporter-telegram

      - name: Helm Deploy Telegram Bot Service
        if: ${{ needs.detect-changes.outputs.telegram-bot-chart == 'true' }}
        run: helm upgrade --install --atomic -n default -f ./charts/telegram-bot/values.yaml telegram-bot ./charts/telegram-bot

      - name: Helm Deploy Kafka UI
        if: ${{ needs.detect-changes.outputs.kafka-ui-chart == 'true' }}
        run: helm upgrade --install --atomic -n default -f ./charts/kafka-ui/values.yaml kafka-ui ./charts/kafka-ui

      - name: Helm Deploy Grafana
        if: ${{ needs.detect-changes.outputs.grafana-chart == 'true' }}
        run: helm upgrade --install --atomic -n default -f ./charts/grafana/values.yaml grafana ./charts/grafana

      - name: Helm Deploy Admin User
        if: ${{ needs.detect-changes.outputs.admin-user-chart == 'true' }}
        run: helm upgrade --install --atomic -n default -f ./charts/admin-user/values.yaml admin-user ./charts/admin-user

      - name: Helm Deploy Prometheus
        if: ${{ needs.detect-changes.outputs.prometheus-chart == 'true' }}
        run: helm upgrade --install --atomic -n default -f ./charts/prometheus/values.yaml prometheus ./charts/prometheus

#      - name: Helm Deploy
#        run: |-
      #          helm upgrade --install --atomic -n default -f ./charts/frontend/values.yaml frontend ./charts/frontend
      #          helm upgrade --install --atomic -n default -f ./charts/invest/values.yaml invest ./charts/invest
      #          helm upgrade --install --atomic -n default -f ./charts/wit-ai-go-proxy/values.yaml wit-ai-go-proxy ./charts/wit-ai-go-proxy

      - name: Conditional Rollout Restarts
        run: |
          if [ "${{ needs.detect-changes.outputs.orchestrator }}" == "true" ]; then
            kubectl rollout restart deployment sa-orchestrator -n default
          fi

          if [ "${{ needs.detect-changes.outputs.recognizer }}" == "true" ]; then
            kubectl rollout restart deployment sa-recognizer -n default
          fi

          if [ "${{ needs.detect-changes.outputs.telegram-bot }}" == "true" ]; then
            kubectl rollout restart deployment sa-telegram-bot -n default
          fi

#          if [ "${{ needs.detect-changes.outputs.invest }}" == "true" ]; then
#            kubectl rollout restart deployment sa-invest -n default
#          fi
#
#          if [ "${{ needs.detect-changes.outputs.wit-ai-go-proxy }}" == "true" ]; then
#            kubectl rollout restart deployment sa-wit-ai-go-proxy -n default
#          fi
#
#          if [ "${{ needs.detect-changes.outputs.frontend }}" == "true" ]; then
#            kubectl rollout restart deployment frontend -n default
#          fi