name: Build & Deploy

on:
  push:
    branches:
      - master

env:
  HEALTHCHECK_MAX_ATTEMPTS_PING_DEPLOYED_SERVICE: 20
  HEALTHCHECK_DELAY_BETWEEN_PING_ATTEMPTS: 10
  HEALTHCHECK_REQUIRED_RESPONSE_UP: '{\"status\":\"UP\"}'


jobs:
  push_compose:
    name: Push docker-compose.yaml to remote server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Copy docker-compose.yaml via SSH
        uses: appleboy/scp-action@master
        with:
          host: overridetech.ru
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          source: "docker-compose.yaml"
          target: "/home/${{ secrets.SSH_USER }}"
          overwrite: true

  paths-filter:
    runs-on: ubuntu-latest
    outputs:
      eureka: ${{ steps.filter.outputs.eureka }}
      recognizer: ${{ steps.filter.outputs.recognizer }}
      orchestrator: ${{ steps.filter.outputs.orchestrator }}
      telegram-bot: ${{ steps.filter.outputs.telegram-bot }}
      wit-ai-go-proxy: ${{ steps.filter.outputs.wit-ai-go-proxy }}
      nginx: ${{ steps.filter.outputs.nginx }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            eureka:
              - 'eureka_service/**'
            recognizer:
              - 'recognizer_service/**'
            orchestrator:
              - 'orchestrator_service/**'
            telegram-bot:
              - 'telegram_bot_service/**'
            wit-ai-go-proxy:
              - 'wit_ai_go_proxy/**'
            nginx:
              - 'nginx/**'

  build_and_push_images:
    name: Push image to DockerHub
    runs-on: ubuntu-latest
    needs: paths-filter
    steps:
      - uses: actions/checkout@v3
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Eureka Build and Push to Dockerhub
        if: ${{ needs.paths-filter.outputs.eureka == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /eureka_service/Dockerfile
          push: true
          tags: nekromant322/overmoney:eureka

      - name: Orchestrator Build and Push to Dockerhub
        if: ${{ needs.paths-filter.outputs.orchestrator == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /orchestrator_service/Dockerfile
          push: true
          tags: nekromant322/overmoney:orchestrator

      - name: Recognizer Build and Push to Dockerhub
        if: ${{ needs.paths-filter.outputs.recognizer == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /recognizer_service/Dockerfile
          push: true
          tags: nekromant322/overmoney:recognizer

      - name: Telegram Bot Build and Push to Dockerhub
        if: ${{ needs.paths-filter.outputs.telegram-bot == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /telegram_bot_service/Dockerfile
          push: true
          tags: nekromant322/overmoney:telegram-bot

      - name: Wit ai go proxy Build and Push to Dockerhub
        if: ${{ needs.paths-filter.outputs.wit-ai-go-proxy == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /wit_ai_go_proxy/Dockerfile
          push: true
          tags: nekromant322/overmoney:wit-ai-go-proxy

      - name: Copy nginx.conf and /sites-enabled via SSH
        if: ${{ needs.paths-filter.outputs.nginx == 'true' }}
        uses: appleboy/scp-action@master
        with:
          host: overridetech.ru
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          source: "nginx/*"
          target: "/home/${{ secrets.SSH_USER }}"
          overwrite: true


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ build_and_push_images, paths-filter, push_compose ]
    steps:
      - name: Connect with SSH and Deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: overridetech.ru
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            echo ORCHESTRATOR_DB_USER = ${{ secrets.ORCHESTRATOR_DB_USER }} > overmoney-env.txt
            echo ORCHESTRATOR_DB_PASSWORD = ${{ secrets.ORCHESTRATOR_DB_PASSWORD }} >> overmoney-env.txt
            echo ORCHESTRATOR_DB_PORT = 5432 >> overmoney-env.txt
            echo ORCHESTRATOR_DB_HOST = orchestrator-db >> overmoney-env.txt
            echo TELEGRAM_BOT_DB_USER = ${{ secrets.TELEGRAM_BOT_DB_USER }} >> overmoney-env.txt
            echo TELEGRAM_BOT_DB_PASSWORD = ${{ secrets.TELEGRAM_BOT_DB_PASSWORD }} >> overmoney-env.txt
            echo TELEGRAM_BOT_DB_PORT = 5432 >> overmoney-env.txt
            echo TELEGRAM_BOT_DB_HOST = telegram-bot-db >> overmoney-env.txt
            echo TELEGRAM_BOT_TOKEN = ${{ secrets.TELEGRAM_BOT_TOKEN }} >> overmoney-env.txt
            echo TELEGRAM_BOT_NAME = OverMoneyBot >> overmoney-env.txt
            echo JWT_ACCESS_KEY = ${{ secrets.JWT_ACCESS_KEY }} >> overmoney-env.txt
            echo JWT_REFRESH_KEY = ${{ secrets.JWT_REFRESH_KEY }} >> overmoney-env.txt
            echo WIT_AI_TOKEN = ${{ secrets.WIT_AI_TOKEN }} >> overmoney-env.txt
            echo SPRING_APPLICATION_PROFILE = test >> overmoney-env.txt
            echo ORCHESTRATOR_HOST = ${{secrets.ORCHESTRATOR_HOST}} >> overmoney-env.txt
            echo AUDIO_RECOGNIZER_URL = 'http://wit-ai-go-proxy:3333/recognizer' >> overmoney-env.txt
            
            if ${{ needs.paths-filter.outputs.eureka}}; then
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker stop eureka
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker rm eureka
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker rmi nekromant322/overmoney:eureka
            fi
            
            if ${{ needs.paths-filter.outputs.recognizer}}; then
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker stop recognizer
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker rm recognizer
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker rmi nekromant322/overmoney:recognizer
            fi
            
            if ${{ needs.paths-filter.outputs.orchestrator}}; then
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker stop orchestrator
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker rm orchestrator
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker rmi nekromant322/overmoney:orchestrator
            fi
            
            if ${{ needs.paths-filter.outputs.telegram-bot}}; then
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker stop telegram-bot
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker rm telegram-bot
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker rmi nekromant322/overmoney:telegram-bot
            fi
            
            if ${{ needs.paths-filter.outputs.wit-ai-go-proxy}}; then
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker stop wit-ai-go-proxy
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker rm wit-ai-go-proxy
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker rmi nekromant322/overmoney:wit-ai-go-proxy
            fi
            
            echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker-compose -f docker-compose.yaml --env-file=overmoney-env.txt up -d
            echo ${{ secrets.SSH_PASSWORD }} | sudo -S docker ps -a  
            rm overmoney-env.txt
            
            if ${{ needs.paths-filter.outputs.nginx}}; then
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S cp -r '/home/${{ secrets.SSH_USER }}/nginx'/* /etc/nginx
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S systemctl restart nginx
            fi
  

  healthcheck-eureka:
    name: HealthCheckEureka
    if: ${{ needs.paths-filter.outputs.eureka }}
    runs-on: ubuntu-latest
    needs: [ deploy, paths-filter ]
    steps:
      - name: Connect with SSH and Deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: overridetech.ru
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            URL="localhost:8761/actuator/health";
            counter=0;
            while [ $counter -lt ${{env.HEALTHCHECK_MAX_ATTEMPTS_PING_DEPLOYED_SERVICE}} ]; do 
             RESPONSE=$(curl $URL); 
             if [ "$RESPONSE" = "${{env.HEALTHCHECK_REQUIRED_RESPONSE_UP}}" ]; then 
              echo "Eureka started"; 
              exit 0; 
             else echo "Eureka not started yet"; 
             fi; 
             sleep ${{env.HEALTHCHECK_DELAY_BETWEEN_PING_ATTEMPTS}}; 
             counter=`expr $counter + 1`
            done; 
            exit 1

  healthcheck-orchestrator:
    name: HealthCheckOrchestrator
    if: ${{ needs.paths-filter.outputs.orchestrator }}
    runs-on: ubuntu-latest
    needs: [ deploy, paths-filter ]
    steps:
      - name: Connect with SSH and Deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: overridetech.ru
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            URL="localhost:8081/actuator/health";
            counter=0;
            while [ $counter -lt ${{env.HEALTHCHECK_MAX_ATTEMPTS_PING_DEPLOYED_SERVICE}} ]; do 
              RESPONSE=$(curl $URL); 
              if [ "$RESPONSE" = "${{env.HEALTHCHECK_REQUIRED_RESPONSE_UP}}" ]; then 
                echo "Orchestrator started"; exit 0; 
              else echo "Orchestrator not started yet"; 
              fi; 
              sleep ${{env.HEALTHCHECK_DELAY_BETWEEN_PING_ATTEMPTS}};
              counter=`expr $counter + 1` 
            done; 
            exit 1
  

  healthcheck-recognizer:
    name: HealthCheckRecognizer
    if: ${{ needs.paths-filter.outputs.recognizer }}
    runs-on: ubuntu-latest
    needs: [ deploy, paths-filter ]
    steps:
      - name: Connect with SSH and Deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: overridetech.ru
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            URL="localhost:8080/actuator/health";
            counter=0;
            while [ $counter -lt ${{env.HEALTHCHECK_MAX_ATTEMPTS_PING_DEPLOYED_SERVICE}} ]; do 
             RESPONSE=$(curl $URL); 
             if [ "$RESPONSE" = "${{env.HEALTHCHECK_REQUIRED_RESPONSE_UP}}" ]; then 
              echo "Recognizer started"; 
              exit 0; 
             else echo "Recognizer not started yet"; 
             fi; 
             sleep ${{env.HEALTHCHECK_DELAY_BETWEEN_PING_ATTEMPTS}};
             counter=`expr $counter + 1` 
            done; 
            exit 1


  healthcheck-telegram-bot:
    name: HealthCheckTelegram-Bot
    if: ${{ needs.paths-filter.outputs.telegram-bot }}
    runs-on: ubuntu-latest
    needs: [ deploy, paths-filter ]
    steps:
      - name: Connect with SSH and Deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: overridetech.ru
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            URL="localhost:8082/actuator/health";
            counter=0;
            while [ $counter -lt ${{env.HEALTHCHECK_MAX_ATTEMPTS_PING_DEPLOYED_SERVICE}} ]; do 
             RESPONSE=$(curl $URL); 
             if [ "$RESPONSE" = "${{env.HEALTHCHECK_REQUIRED_RESPONSE_UP}}" ]; then 
              echo "Telegram Bot started"; 
              exit 0; 
             else echo "Telegram Bot not started yet"; 
             fi; 
             sleep ${{env.HEALTHCHECK_DELAY_BETWEEN_PING_ATTEMPTS}}; 
             counter=`expr $counter + 1`
            done; 
            exit 1

  healthcheck-wit-ai-go-proxy:
    name: HealthCheckWit-ai-go-proxy
    if: ${{ needs.paths-filter.outputs.wit-ai-go-proxy }}
    runs-on: ubuntu-latest
    needs: [ deploy, paths-filter ]
    steps:
      - name: Connect with SSH and Deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: overridetech.ru
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            URL="localhost:3333/actuator/health";
            counter=0;
            while [ $counter -lt ${{env.HEALTHCHECK_MAX_ATTEMPTS_PING_DEPLOYED_SERVICE}} ]; do 
             RESPONSE=$(curl $URL); 
             if [ "$RESPONSE" = "${{env.HEALTHCHECK_REQUIRED_RESPONSE_UP}}" ]; then 
              echo "Telegram Bot started"; 
              exit 0; 
             else echo "Wit ai go proxy not started yet"; 
             fi; 
             sleep ${{env.HEALTHCHECK_DELAY_BETWEEN_PING_ATTEMPTS}}; 
             counter=`expr $counter + 1`
            done; 
            exit 1
