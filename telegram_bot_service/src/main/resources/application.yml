  bot:
    name: ${TELEGRAM_BOT_NAME}
    token: ${TELEGRAM_BOT_TOKEN}
    api:
      url: https://api.telegram.org
    voice:
      max_length: 10
  admin:
    allowed_users:
      Marandyuk_Anatolii,
      Denis_Shvartcer

#настройка веб адреса приложения
  orchestrator:
    host: ${ORCHESTRATOR_HOST}

  integration:
    internal:
      host:
        orchestrator: http://orchestrator-service
        recognizer: http://recognizer-service

  environment: ${ENVIRONMENT:dev}

  server:
    port: 8080
# Используется для переключения получения транзакций через kafka или через http
# Необходимо поменять и в orchestrator_service и в telegram_bot_service
# Для выбора http необходимо установить значение processing: orchestrator
# Для выбора kafka необходимо установить значение processing: kafka
  service:
    transaction:
      processing: orchestrator

  spring:
    application:
      name: telegram-bot-service

    datasource:
      url: jdbc:postgresql://${TELEGRAM_BOT_DB_HOST:localhost}:${TELEGRAM_BOT_DB_PORT:5435}/telegram-bot-db
      username: ${TELEGRAM_BOT_DB_USER:postgres}
      password: ${TELEGRAM_BOT_DB_PASSWORD:postgres}
      driver-class-name: org.postgresql.Driver

    jpa:
      database: postgresql
      database-platform: org.hibernate.dialect.PostgreSQLDialect
      generate-ddl: false
      hibernate:
        ddl-auto: none
      properties:
        hibernate:
          dialect: org.hibernate.dialect.PostgreSQLDialect
          current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext

    liquibase:
      enabled: true
      change-log: /db/changelog/db.changelog-master.xml

    profiles:
      active: ${SPRING_APPLICATION_PROFILE:dev}
    kafka:
      topics:
        request: transaction-request-events-topic
        response: transaction-response-events-topic
      bootstrap-servers: kafka-service:9092
      producer:
        key-serializer: org.apache.kafka.common.serialization.StringSerializer
        value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      consumer:
        key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
        value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
        group-id: transaction-sent-events
        properties:
          spring.json.trusted.packages: com.override.dto
          spring:
            deserializer:
              key:
                delegate:
                  class: org.apache.kafka.common.serialization.StringDeserializer
              value:
                delegate:
                  class: org.springframework.kafka.support.serializer.JsonDeserializer

  logging:
    level:
      org.zalando.logbook: TRACE

  management:
    endpoints:
      web:
        exposure:
          include: health,prometheus
    metrics:
      export:
        prometheus:
          enabled: true
      distribution:
        percentiles-histogram:
          "[http.server.requests]": true

  max-mailing-messages:
    maxMessagesOfAnnouncePerSecond: 25

  authorization-header:
    header-value: ${INTERNAL_KEY_HEADER:X-INTERNAL-KEY}

  mask-log-spring-boot-starter:
    maskedFields:
      - x-internal-key
