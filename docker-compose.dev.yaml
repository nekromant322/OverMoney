version: '3.1'

services:
  orchestrator-db:
    container_name: orchestrator-db
    image: postgres:14.1-alpine
    ports:
      - '5433:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orchestrator-db
    restart: always

  telegram-bot-db:
    container_name: telegram-bot-db
    image: postgres:14.1-alpine
    ports:
      - '5435:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: telegram-bot-db
    restart: always

  payment-db:
    container_name: payment-db
    image: postgres:14.1-alpine
    ports:
      - '5436:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payments-db
    restart: always

  orchestrator:
    container_name: orchestrator
    build:
      context: .
      dockerfile: orchestrator_service/Dockerfile
    ports:
      - '8081:8081'
    environment:
      _JAVA_OPTIONS: -Xmx256m
      ORCHESTRATOR_DB_USER: postgres
      ORCHESTRATOR_DB_PASSWORD: postgres
      ORCHESTRATOR_DB_HOST: orchestrator-db
      ORCHESTRATOR_DB_PORT: 5432
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_BOT_NAME: ${TELEGRAM_BOT_NAME}
      JWT_ACCESS_KEY: 4LKiGdX0aJhBdx5wFH5cs8v6HnGIUyhDn7BeoLqJ4UEixTGOT3CYKg6YrzS32K5hMlVdstATeliyxhRH0eaU6A==
      JWT_REFRESH_KEY: 5LKiGdX0aJhBdx5wFH5cs8v6HnGIUyhDn7BeoLqJ4UEixTGOT3CYKg6YrzS32K5hMlVdstATeliyxhRH0eaU6A==
      INTERNAL_KEY_HEADER: X-INTERNAL-KEY
      #      такого рода приседания нужны чтобы спокойно запускать для тестов и в контейнерах и без
      SPRING_INTEGRATION_INTERNAL_HOST_RECOGNIZER: http://recognizer:8080
      SPRING_INTEGRATION_INTERNAL_HOST_TELEGRAM_BOT: http://telegram-bot:8082
      SPRING_INTEGRATION_INTERNAL_HOST_INVEST: http://invest:8087
      SPRING_INTEGRATION_INTERNAL_HOST_PAYMENT: http://payment:8084
#      закоменти следующую строку если охота пулять транзакции через кафку
      SPRING_SERVICE_TRANSACTION_PROCESSING: orchestrator
    depends_on:
      - orchestrator-db

  recognizer:
    container_name: recognizer
    build:
      context: .
      dockerfile: recognizer_service/Dockerfile
    ports:
      - '8080:8080'
    environment:
      _JAVA_OPTIONS: -Xmx256m
      WIT_AI_TOKEN: ${WIT_AI_TOKEN}
      INTERNAL_KEY_HEADER: X-INTERNAL-KEY
      SPRING_INTEGRATION_INTERNAL_HOST_ORCHESTRATOR: http://orchestrator:8081

  telegram-bot:
    container_name: telegram-bot
    build:
      context: .
      dockerfile: telegram_bot_service/Dockerfile
    ports:
      - '8082:8082'
    environment:
      _JAVA_OPTIONS: -Xmx256m
      TELEGRAM_BOT_DB_USER: postgres
      TELEGRAM_BOT_DB_PASSWORD: postgres
      TELEGRAM_BOT_DB_HOST: telegram-bot-db
      TELEGRAM_BOT_DB_PORT: 5432
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_BOT_NAME: ${TELEGRAM_BOT_NAME}
      ORCHESTRATOR_HOST: ${ORCHESTRATOR_HOST}
      INTERNAL_KEY_HEADER: X-INTERNAL-KEY
      SPRING_INTEGRATION_INTERNAL_HOST_ORCHESTRATOR: http://orchestrator:8081
      SPRING_INTEGRATION_INTERNAL_HOST_RECOGNIZER: http://recognizer:8080
      SPRING_INTEGRATION_INTERNAL_HOST_PAYMENT: http://payment:8084
      #      закоменти следующую строку если охота пулять транзакции через кафку
      SPRING_SERVICE_TRANSACTION_PROCESSING: orchestrator
    depends_on:
      - telegram-bot-db
  invest:
    container_name: invest
    build:
      context: .
      dockerfile: invest_service/Dockerfile
    restart: unless-stopped
    ports:
      - '8087:8087'
    environment:
      _JAVA_OPTIONS: -Xmx256m
      INTERNAL_KEY_HEADER: X-INTERNAL-KEY
    logging:
      driver: "json-file"
      options:
        max-size: 50m

  payment:
    container_name: payment
    build:
      context: .
      dockerfile: payment_service/Dockerfile
    ports:
      - '8084:8084'
    environment:
      _JAVA_OPTIONS: -Xmx256m
      PAYMENT_DB_USER: postgres
      PAYMENT_DB_PASSWORD: postgres
      PAYMENT_DB_HOST: payment-db
      PAYMENT_DB_PORT: 5432
    depends_on:
      - payment-db

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_INTERNAL://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper